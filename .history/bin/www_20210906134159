#!/usr/bin/env node

/**
 * Module dependencies.
 */
const mongoose = require("mongoose");
const app = require("../app");
const debug = require("debug")("react-tictactoe21:server");
const http = require("http");
const server = http.createServer(app);
const WSserver = require("express-ws")(app);
const WebSocket = require("ws");

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

/**
 * Listen on provided port, on all network interfaces.
 */
const userMongoDB = "PGVlasov";

async function start() {
  try {
    const url =
      "mongodb+srv://PGVlasov:pYysGR4QudCqufWH@cluster0.qjjvx.mongodb.net/tictactoe2021";

    await mongoose.connect(url, { useNewUrlParser: true });

    server.listen(port, () => {
      console.log(`server is runing om port:${port}`);
    });
  } catch (e) {
    console.log(e);
  }
}

start();
// server.listen(port, () => {
//   console.log(`server is runing om port:${port}`);
// });
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

const webSocketServer = new WebSocket.Server({ server });
webSocketServer.on("connection", (webSocket) => {
  console.info("Total connected clients:", webSocketServer.clients.size);

  app.locals.clients = webSocketServer.clients;
});

app.ws("/", (ws, req) => {
  console.log("подключение установлено!");
  ws.send("ты подключен");
  ws.on("message", (msg) => {
    console.log(msg);
  });
});
